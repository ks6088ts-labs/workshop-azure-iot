{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"workshop-azure-iot","text":"<p>This repository is for a workshop using Azure IoT services.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>To run all the projects in this repository, you need the followings.</p> <ul> <li>Python 3.10+</li> </ul> <p>Here are the preferred tools for development.</p> <ul> <li>Poetry</li> <li>GNU Make</li> </ul>"},{"location":"#scenarios","title":"Scenarios","text":"<ul> <li>Azure IoT Hub Messaging</li> </ul>"},{"location":"#setup","title":"Setup","text":""},{"location":"#infrastructure","title":"Infrastructure","text":"<p>Click the button below to deploy the infrastructure to Azure.</p> <p></p>"},{"location":"#application","title":"Application","text":""},{"location":"#setup-environment-variables","title":"Setup environment variables","text":"<p>To get started, you have to set environment variables in the <code>*.env</code> files in the root directory. Please refer to the <code>*.env.template</code> files for the required environment variables.</p> <pre><code># Clone the repository\n$ git clone https://github.com/ks6088ts-labs/workshop-azure-iot.git\n\n# Change the directory\n$ cd workshop-azure-iot\n\n# Prepare the environment files based on the templates\n$ make env\n</code></pre> <p>Please update the environment files to fit your environment.</p>"},{"location":"#how-to-run","title":"How to run","text":"<p>Connection test</p> <p>Following commands are for testing the connection to the Azure resources. Passing the test means the environment is set up correctly.</p> <pre><code># Run test locally to check the environment is set up correctly\n$ make test\n</code></pre> <p>Run FastAPI server locally</p> <pre><code># Install dependencies\n$ make install-deps\n\n# Run FastAPI server locally\n$ make server\n</code></pre> <p>Run FastAPI server locally from Docker image</p> <p>Docker is required to run the FastAPI server locally from the Docker image. The image for this project is available on Docker Hub. See the Docker Hub repository: ks6088ts/workshop-azure-iot.</p> <pre><code># Run FastAPI server locally from Docker image\n$ make docker-run\n</code></pre> <p>Run Azure Functions locally</p> <pre><code># Run Azure Functions locally\n$ make azure-functions\n</code></pre> <p>Deploy Azure Functions</p> <pre><code># Deploy Azure Functions resources\n$ make azure-functions-deploy\n\n# Publish Azure Functions\n$ export FUNCTION_APP_NAME=adhoc-azure-functions-RANDOM_SUFFIX\n$ make azure-functions-publish\n</code></pre>"},{"location":"#references","title":"References","text":""},{"location":"#azure-functions","title":"Azure Functions","text":"<ul> <li>Using FastAPI Framework with Azure Functions</li> </ul>"},{"location":"scenarios/1_azure_iot_hub_messaging/","title":"Azure IoT Hub Messaging","text":"<p>This scenario demonstrates how to handle messages from an Azure IoT Hub using the Azure IoT Hub SDK for Python.</p>"},{"location":"scenarios/1_azure_iot_hub_messaging/#architecture","title":"Architecture","text":""},{"location":"scenarios/1_azure_iot_hub_messaging/#setup","title":"Setup","text":""},{"location":"scenarios/1_azure_iot_hub_messaging/#configure-iot-hub-file-uploads-via-azure-portal","title":"Configure IoT Hub file uploads via Azure Portal","text":"<p>After you deploy the Azure IoT Hub, you need to configure IoT Hub file uploads. This is required to upload files from the IoT Hub to the Azure Blob Storage. Here are the steps to configure IoT Hub file uploads: Configure IoT Hub file uploads using the Azure portal</p> <p>It is recommended to use managed identities to access the Azure Blob Storage from the Azure IoT Hub. See how to configure managed identities for IoT Hub: Configure file upload with managed identities</p>"},{"location":"scenarios/1_azure_iot_hub_messaging/#configure-azure-cosmos-db-as-a-routing-endpoint","title":"Configure Azure Cosmos DB as a routing endpoint","text":"<p>To pass messages from the Azure IoT Hub to the Azure Cosmos DB, you need to configure Azure Cosmos DB as a routing endpoint.</p> <ul> <li>General Availability: Azure IoT Hub supports Azure Cosmos DB routing endpoint now!</li> <li>IoT Hub endpoints &gt; Azure Cosmos DB as a routing endpoint</li> <li>IoT Hub support for managed identities</li> </ul>"},{"location":"scenarios/1_azure_iot_hub_messaging/#edge-device","title":"Edge device","text":"<p>To understand how to use the Azure IoT Hub SDK for Python, we provide a script which is supposed to run on the edge device. This demonstrates how to utilize the SDK to send and receive messages from the Azure IoT Hub. To implement features around the Azure IoT Hub, you can refer to the following scripts.</p> <ul> <li>Samples for the Azure IoT Hub Device SDK</li> </ul>"},{"location":"scenarios/1_azure_iot_hub_messaging/#upload-a-file-to-the-azure-blob-storage","title":"Upload a file to the Azure Blob Storage","text":"<pre><code>$ poetry run python scripts/upload_to_blob.py --verbose \\\n    --file-path ./README.md \\\n    --blob-name README.md\n</code></pre> <p>upload_to_blob.py is a sample code provided by the Azure IoT SDK for Python.</p>"},{"location":"scenarios/1_azure_iot_hub_messaging/#capture-image","title":"Capture image","text":"<p>To capture an image from the camera module, you need to run the following command from the edge device. From the development point of view, it would be better to use a video file to mock the camera module. So, we provide a script that captures an image from a video file or camera. Download vtest.avi to use it as a video file.</p> <pre><code># From video file to mock camera\n$ poetry run python scripts/capture_image.py file --verbose \\\n    --filename ./docs/assets/vtest.avi \\\n    --outfile ./docs/assets/image.jpg\n\n# From camera\n$ poetry run python scripts/capture_image.py camera --verbose \\\n    --index 0 \\\n    --outfile ./docs/assets/image.jpg\n</code></pre>"},{"location":"scenarios/1_azure_iot_hub_messaging/#receive-direct-method-requests","title":"Receive direct method requests","text":"<p>To receive direct method requests, you need to run the following command from edge device. This script handles direct method requests from the Azure IoT Hub.</p> <pre><code>$ poetry run python scripts/receive_direct_method.py --verbose\n</code></pre> <p>receive_direct_method.py is a sample code provided by the Azure IoT SDK for Python.</p>"},{"location":"scenarios/1_azure_iot_hub_messaging/#cloud","title":"Cloud","text":"<p>Run API server locally to provide RESTful APIs for the edge device.</p> <pre><code>$ make server\n</code></pre>"},{"location":"scenarios/1_azure_iot_hub_messaging/#demo","title":"Demo","text":""},{"location":"scenarios/1_azure_iot_hub_messaging/#setup_1","title":"Setup","text":"<ol> <li>Run the API server. (on local, Docker, or Azure Functions etc.)</li> </ol> <pre><code>$ make server\n</code></pre> <ol> <li>Run the edge device script to receive direct method requests.</li> </ol> <pre><code>$ poetry run python scripts/receive_direct_method.py --verbose\n</code></pre>"},{"location":"scenarios/1_azure_iot_hub_messaging/#send-a-request-to-the-api-server-to-call-the-direct-method","title":"Send a request to the API server to call the direct method.","text":"<p>Go to docs url which shows Swagger UI and send a request to the API server to call the direct method.</p> <ol> <li>Call the direct method from API server.</li> </ol> <p>From the Swagger UI, call <code>POST /iot_hub/call_direct_method</code> with the following request body.</p> method_name payload capture_image_from_file {\"filename\": \"./docs/assets/1_architecture.png\", \"blob_name\": \"file.png\"} capture_image_from_camera {\"index\": 0, \"blob_name\": \"capture0.png\"} <ol> <li>Check the result.</li> </ol> <p>From the Swagger UI, call <code>GET /blob_storage</code> to check the uploaded file.</p> <ol> <li>Get the uploaded file.</li> </ol> <p>Call <code>GET /blob_storage/images/{device_name}/{file_name}</code> to get the uploaded file.</p> <ol> <li>Explain the image by Azure OpenAI API.</li> </ol> <p>Call <code>POST /ai_services/chat/completions_with_image</code> with the following request body.</p> <ul> <li><code>prompt</code>: The prompt to send to the OpenAI API.</li> <li><code>file</code>: The image file to send to the Azure OpenAI API.</li> </ul>"},{"location":"scenarios/1_azure_iot_hub_messaging/#play-with-device-twin","title":"Play with Device Twin","text":"<ol> <li> <p>Update the device twin.</p> </li> <li> <p><code>GET /iot_hub/device_twin</code> to get the device twin.</p> </li> <li> <p>Check the updated device twin.</p> </li> <li> <p><code>PATCH /iot_hub/device_twin</code> to update the device twin.</p> </li> </ol>"},{"location":"scenarios/2_azure_event_grid_messaging/","title":"Azure Event Grid Messaging","text":"<p>This scenario demonstrates how to handle messages from Azure Event Grid.</p>"},{"location":"scenarios/2_azure_event_grid_messaging/#architecture","title":"Architecture","text":""},{"location":"scenarios/2_azure_event_grid_messaging/#setup","title":"Setup","text":"<p>Refer to Quickstart: Publish and subscribe to MQTT messages on Event Grid Namespace with Azure portal to create an Event Grid Namespace and a topic.</p> <p>Azure-Samples/MqttApplicationSamples provides a sample application to publish and subscribe messages to the Event Grid.</p>"},{"location":"scenarios/2_azure_event_grid_messaging/#create-ca-certificate-and-key","title":"Create CA certificate and key","text":"<pre><code>step ca init \\\n    --deployment-type standalone \\\n    --name MqttAppSamplesCA \\\n    --dns localhost \\\n    --address 127.0.0.1:443 \\\n    --provisioner MqttAppSamplesCAProvisioner\n</code></pre>"},{"location":"scenarios/2_azure_event_grid_messaging/#create-client-certificate-and-key","title":"Create client certificate and key","text":"<pre><code>CLIENT_DIR=configs/clients\nmkdir -p $CLIENT_DIR\n\n# Create client certificate and key\nCLIENT_NAME=client1\nstep certificate create $CLIENT_NAME $CLIENT_DIR/$CLIENT_NAME.pem $CLIENT_DIR/$CLIENT_NAME.key \\\n    --ca ~/.step/certs/intermediate_ca.crt \\\n    --ca-key ~/.step/secrets/intermediate_ca_key \\\n    --no-password \\\n    --insecure \\\n    --not-after 2400h\n\n# Display certificate fingerprint to register the client on Azure Event Grid Namespace\nstep certificate fingerprint $CLIENT_DIR/$CLIENT_NAME.pem\n</code></pre>"},{"location":"scenarios/2_azure_event_grid_messaging/#create-mosquitto-configuration","title":"Create mosquitto configuration","text":"<pre><code>MOSQUITTO_DIR=configs/mosquitto\nmkdir -p $MOSQUITTO_DIR\n\n# Set up mosquitto\ncat ~/.step/certs/root_ca.crt ~/.step/certs/intermediate_ca.crt &gt; $MOSQUITTO_DIR/chain.pem\n\nstep certificate create localhost $MOSQUITTO_DIR/localhost.crt $MOSQUITTO_DIR/localhost.key \\\n    --ca ~/.step/certs/intermediate_ca.crt \\\n    --ca-key ~/.step/secrets/intermediate_ca_key \\\n    --no-password \\\n    --insecure \\\n    --not-after 2400h\n\n# Run mosquitto\nmake mosquitto\n</code></pre>"},{"location":"scenarios/2_azure_event_grid_messaging/#demo","title":"Demo","text":"<pre><code># If you use localhost, run mosquitto first\nmake mosquitto\n\n# Set the host name of the Event Grid Namespace. If you use localhost, set it to localhost.\nHOST_NAME=localhost\n# HOST_NAME=\"EVENT_GRID_NAME.japaneast-1.ts.eventgrid.azure.net\"\n\n# Subscribe the topic\npoetry run python scripts/event_grid.py subscribe \\\n    --topic \"sample/topic1\" \\\n    --client-name client1 \\\n    --host-name $HOST_NAME \\\n    --verbose\n\n# Publish messages to the topic\npoetry run python scripts/event_grid.py publish \\\n    --topic \"sample/topic1\" \\\n    --payload \"helloworld\" \\\n    --client-name client2 \\\n    --host-name $HOST_NAME \\\n    --verbose\n</code></pre>"},{"location":"scenarios/2_azure_event_grid_messaging/#use-namespace-topics-to-route-mqtt-messages-to-azure-event-hubs","title":"Use namespace topics to route MQTT messages to Azure Event Hubs","text":"<p>To set up resources for this scenario, refer to Tutorial: Use namespace topics to route MQTT messages to Azure Event Hubs (Azure portal).</p> <p>After deploying the scenario, do the following steps:</p> <ul> <li>Create a namespace topic on the Event Grid Namespace.</li> <li>Give Event Grid namespace the access to send events to the event hub</li> <li>Create an event subscription with Event Hubs as the endpoint</li> <li>Configure routing in the Event Grid namespace</li> </ul> <p>Send MQTT messages to the topic and check the messages in the Event Hub, as described in View routed MQTT messages in Event Hubs by using a Stream Analytics query</p>"},{"location":"scenarios/2_azure_event_grid_messaging/#references","title":"References","text":"<ul> <li>Automotive messaging, data &amp; analytics reference architecture</li> </ul>"},{"location":"scenarios/3_generic_messaging/","title":"Generic messaging","text":"<p>This scenario demonstrates a generic scenario of a monitoring service to collect and visualize IoT device metrics using Grafana and Prometheus.</p>"},{"location":"scenarios/3_generic_messaging/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker</li> </ul>"},{"location":"scenarios/3_generic_messaging/#architecture","title":"Architecture","text":""},{"location":"scenarios/3_generic_messaging/#usage","title":"Usage","text":"<p>Use Docker Compose in your local environment to build a monitoring service that collects and visualizes IoT device metrics. The service is defined in compose.yaml, and the configuration for each service is in the configs directory.</p> Service Description Grafana Dashboard for visualizing metrics Prometheus Monitoring service for collecting metrics Node Exporter Agent for collecting node metrics Alertmanager Monitoring service for alert notifications Prometheus Client Agent for simulating virtual devices <p>Run the following commands to build the monitoring service in your local environment:</p> <pre><code># Clone the repository and navigate to it\ngit clone https://github.com/ks6088ts-labs/iot-monitoring.git\ncd iot-monitoring\n\n# Build the monitoring service with Docker Compose\ndocker compose up -d\n</code></pre> <p>Access Grafana at http://localhost:3000 and log in. The default username and password are both <code>admin</code>. You will be prompted to change the password upon first login.</p> <p>After logging in, open Dashboards &gt; Services &gt; Node Exporter Full from the Grafana home to view the node-exporter metrics.</p> <p></p> <p>Open Dashboards &gt; Services &gt; Prometheus Client to view the prometheus client metrics.</p> <p></p>"},{"location":"scenarios/3_generic_messaging/#customization","title":"Customization","text":""},{"location":"scenarios/3_generic_messaging/#notification-settings","title":"Notification Settings","text":""},{"location":"scenarios/3_generic_messaging/#slack","title":"Slack","text":"<p>Use Slack's Incoming Webhooks to send alerts. Obtain a Slack Webhook URL and set it in the <code>slack_api_url</code> field of alertmanager.yml.</p>"},{"location":"scenarios/3_generic_messaging/#edit-alert-notifications","title":"Edit Alert Notifications","text":"<p>Alerts are defined in Alertmanager's alert_rules.yml with the following rules:</p> <ul> <li>InstanceDown: Triggered when metrics are not collected for a certain period</li> <li>APIHighRequestLatency: Triggered when API latency exceeds a threshold for a certain period</li> </ul> <p>Refer to the Alertmanager Configuration documentation to edit alert rules.</p>"},{"location":"scenarios/3_generic_messaging/#simulate-node-metrics-changes","title":"Simulate Node Metrics Changes","text":"<p>To test alerts, change the Node Exporter metrics. Run the following commands to increase CPU usage and observe metric changes:</p> <pre><code># Log in to the Node Exporter container\ndocker compose exec node-exporter sh\n\n# Increase CPU load to change metrics\nyes &gt; /dev/null &amp;\n\n# Check the PID and kill the process to clean up\nps\nkill &lt;PID0&gt;\n</code></pre>"},{"location":"scenarios/3_generic_messaging/#test-alerts","title":"Test Alerts","text":"<p>To trigger an InstanceDown alert, stop the Node Exporter with the following commands:</p> <pre><code># Stop the Node Exporter\ndocker compose stop node-exporter\n</code></pre> <p>An alert will be triggered after a certain period.</p>"},{"location":"scenarios/3_generic_messaging/#implement-an-exporter","title":"Implement an Exporter","text":"<p>To collect metrics other than Node Exporter, implement an Exporter. An Exporter is an HTTP server that provides metrics to Prometheus.</p> <p><code>prometheus-client</code> container is an HTTP server that provides time-varying metrics.</p>"},{"location":"scenarios/3_generic_messaging/#references","title":"References","text":""},{"location":"scenarios/3_generic_messaging/#prometheus","title":"Prometheus","text":"<ul> <li>What is Prometheus?</li> <li>ALERTING RULES</li> <li>Monitor your home's temperature and humidity with Raspberry Pis and Prometheus</li> </ul>"},{"location":"scenarios/3_generic_messaging/#grafana","title":"Grafana","text":"<ul> <li>Grafana &gt; Data sources &gt; Prometheus</li> <li>All dashboards &gt; Node Exporter Full</li> <li>node-exporter-full.json</li> <li>Grafana \u3067 Dashboard \u3068 DataSource \u306e\u8a2d\u5b9a\u3092\u30d5\u30a1\u30a4\u30eb\u3067\u7ba1\u7406\u3059\u308b[Configuration as Code]</li> <li>Prometheus + Node_exporter + Grafana \u3067\u30b7\u30b9\u30c6\u30e0\u7ba1\u7406</li> <li>Grafana \u306e\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u3092\u30a8\u30af\u30b9\u30dd\u30fc\u30c8/\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u307f\u305f</li> </ul>"},{"location":"scenarios/4_azure_iot_edge_messaging/","title":"Azure IoT Edge Messaging","text":"<p>This scenario demonstrates how to deploy an IoT Edge module.</p>"},{"location":"scenarios/4_azure_iot_edge_messaging/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker</li> </ul>"},{"location":"scenarios/4_azure_iot_edge_messaging/#architecture","title":"Architecture","text":""},{"location":"scenarios/4_azure_iot_edge_messaging/#setup","title":"Setup","text":""},{"location":"scenarios/4_azure_iot_edge_messaging/#on-docker-container","title":"on Docker container","text":"<p>To run the IoT Edge runtime on a Docker container with Ubuntu 22.04, follow the steps below.</p> <pre><code># set environment variables\nexport DEVICE_CONNECTION_STRING=\"HostName=YOUR_IOT_HUB.azure-devices.net;DeviceId=YOUR_DEVICE_ID;SharedAccessKey=YOUR_SHARED_ACCESS_KEY\"\n\n# check if the container is running\ndocker ps\n\n# exec into the container\ndocker exec -it workshop-azure-iot-iot-edge-1 bash\n</code></pre> <p>in the container</p> <pre><code># install iot edge runtime\nbash install-iot-edge.sh\n</code></pre> <p>ref. \u3010ubuntu\u3011Docker \u3067 systemctl \u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b</p>"},{"location":"scenarios/4_azure_iot_edge_messaging/#on-azure-vm","title":"on Azure VM","text":"<p>Deploy Azure VM via Azure Portal with Ubuntu 22.04. See Create a Linux virtual machine in the Azure portal for details.</p> <pre><code># SSH into the VM\nIP_ADDRESS=111.111.111.111\nssh -i ~/.ssh/id_rsa azureuser@$IP_ADDRESS\n\n# sudo to root\nsudo su\n\n# set environment variables\nexport DEVICE_CONNECTION_STRING=\"HostName=YOUR_IOT_HUB.azure-devices.net;DeviceId=YOUR_DEVICE_ID;SharedAccessKey=YOUR_SHARED_ACCESS_KEY\"\n\n# create an install script (copy and paste install-iot-edge.sh)\ncat &lt;&lt;EOF &gt; install-iot-edge.sh\n\n# install iot edge runtime\nbash install-iot-edge.sh\n</code></pre>"},{"location":"scenarios/4_azure_iot_edge_messaging/#usage","title":"Usage","text":"<pre><code># help\niotedge -h\n\n# list modules\niotedge list\n\n# monitor logs\niotedge logs SimulatedTemperatureSensor\n</code></pre>"},{"location":"scenarios/4_azure_iot_edge_messaging/#references","title":"References","text":""},{"location":"scenarios/4_azure_iot_edge_messaging/#azure-iot-edge","title":"Azure IoT Edge","text":"<ul> <li>Create and manage device identities</li> <li>Create and provision an IoT Edge device on Linux using symmetric keys</li> <li>Azure/iotedge-vm-deploy</li> <li>Quickstart: Deploy your first IoT Edge module to a virtual Linux device</li> <li>Tutorial: Monitor IoT Edge devices</li> </ul>"}]}